; State machine for receiving HDLC encoded bits

.define RX_ABORT_INT 0      ; IRQ for abort detection
.define RX_DATA_DONE 1      ; IRQ for RX data done

; Handle receipt of data
; This state machine uses all 32 PIO block instructions
.program hdlc_rx

.wrap_target
begin:
mov ISR, NULL               ; Clear ISR to discard datas
restart:
set x, 7                    ; Number of received one counter (7>= means abort)

receive:
wait 0 pin 1
wait 1 pin 1                ; Waits for clock rising edge
jmp pin one_rcv             ; Goto one_rcv if the bit is one
; We received a 0
check_zero_insert:
set y, 2                    ; If x is 2, we received 5 consecutive one
jmp x!=y check_flag         ; X is not 2, check flag
jmp restart                 ; Received 5 consecutive 1 don't update ISR (inserted 0)

check_flag:
set y, 1                    ; If x is 1, we received 6 consecutive one (flag)
jmp x!=y check_abort        ; X is not 1, check if frame aborted
jmp done                    ; Flag received

check_abort:
jmp !x abort                ; X is zero, abort received

in pins, 1                  ; Shift the zero in the ISR
set x, 7                    ; Reset number of consecutive one
jmp bit_shifted             ; Shift bit in the ISR

;We received a 1
one_rcv:
jmp !x receive              ; Received more than 7 consecutive one, skip
in pins, 1                  ; Shift the one in the ISR
jmp x-- bit_shifted         ; Decrement counter

; A valid bit was shifted
bit_shifted:
set y, 1                    ; If x is 1, we received 6 consecutive one (flag)
jmp x!=y shift_bit          ; X is not 1, no flag, bit valid
jmp receive
shift_bit:
push iffull                 ; Send ISR to RX FIFO (if 8 bits are shifted)
jmp receive

done:
irq RX_DATA_DONE            ; Raise an IRQ to signal transfer start/stop
jmp begin

abort:
irq RX_ABORT_INT            ; Raise an IRQ to signal transfer abort

.wrap


% c-sdk {
/**
    Initializes the hdlc_rx PIO program
    @param pio PIO engine to use
    @param sm State machine number
    @param offset State machine program offset
    @param dataPin Data pin
**/
static inline pio_sm_config hdlc_rx_program_init(PIO pio, uint sm, uint offset, uint dataPin) {
    pio_sm_config c = hdlc_rx_program_get_default_config(offset);

    // First pin is the data, second is clock
    pio_sm_set_consecutive_pindirs(pio, sm, dataPin, 2, false);
    sm_config_set_in_pins(&c, dataPin);
    // Jump pin is the same as data pin
    sm_config_set_jmp_pin(&c, dataPin);

    //Configure the RX FIFO
    //Join TX and RX FIFO as we only do RX
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    //Shift right, without autopush threshold of 8 bits
    sm_config_set_in_shift(&c, true, false, 8);

    // Load our configuration, and jump to the start of the program
    pio_sm_init(pio, sm, offset, &c);
    // Set the state machine running
    pio_sm_set_enabled(pio, sm, true);
    return c;
}
%}